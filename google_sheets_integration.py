
import gspread
import pandas as pd
import os
from google.oauth2.service_account import Credentials
import time
import logging
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class FlowerForecastGSheetsIntegration:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Å Google Sheets
    """

    def __init__(self, credentials_path, spreadsheet_url):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets

        Args:
            credentials_path: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∫–ª—é—á–∞–º–∏ —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            spreadsheet_url: —Å—Å—ã–ª–∫–∞ –Ω–∞ Google –¢–∞–±–ª–∏—Ü—É
        """
        self.credentials_path = credentials_path
        self.spreadsheet_url = spreadsheet_url
        self.gc = None
        self.sheet = None
        self._connect()

    def _connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Google Sheets API"""
        try:
            # –û–±–ª–∞—Å—Ç–∏ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è Google Sheets –∏ Google Drive
            scope = ['https://spreadsheets.google.com/feeds',
                    'https://www.googleapis.com/auth/drive']

            # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç
            creds = Credentials.from_service_account_file(
                self.credentials_path, 
                scopes=scope
            )

            self.gc = gspread.authorize(creds)
            self.sheet = self.gc.open_by_url(self.spreadsheet_url)

            logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets: {e}")
            raise

    def load_sales_data(self, worksheet_name="–ü—Ä–æ–¥–∞–∂–∏"):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –∏–∑ Google Sheets

        Args:
            worksheet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö

        Returns:
            pandas.DataFrame: –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥–∞–∂–∞—Ö
        """
        try:
            worksheet = self.sheet.worksheet(worksheet_name)
            data = worksheet.get_all_records()
            df = pd.DataFrame(data)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
            if '–î–∞—Ç–∞' in df.columns:
                df['–î–∞—Ç–∞'] = pd.to_datetime(df['–î–∞—Ç–∞'], errors='coerce')
            if '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ' in df.columns:
                df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = pd.to_numeric(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], errors='coerce')
            if '–¶–µ–Ω–∞' in df.columns:
                df['–¶–µ–Ω–∞'] = pd.to_numeric(df['–¶–µ–Ω–∞'], errors='coerce')

            logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∑–∞–ø–∏—Å–µ–π –æ –ø—Ä–æ–¥–∞–∂–∞—Ö")
            return df

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥–∞–∂: {e}")
            return pd.DataFrame()

    def load_inventory_data(self, worksheet_name="–û—Å—Ç–∞—Ç–∫–∏"):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö –∏–∑ Google Sheets

        Args:
            worksheet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏

        Returns:
            pandas.DataFrame: –¥–∞–Ω–Ω—ã–µ –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö
        """
        try:
            worksheet = self.sheet.worksheet(worksheet_name)
            data = worksheet.get_all_records()
            df = pd.DataFrame(data)

            # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤
            if '–û—Å—Ç–∞—Ç–æ–∫' in df.columns:
                df['–û—Å—Ç–∞—Ç–æ–∫'] = pd.to_numeric(df['–û—Å—Ç–∞—Ç–æ–∫'], errors='coerce')

            logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—Å—Ç–∞—Ç–∫–∞—Ö: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            return df

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å—Ç–∞—Ç–∫–æ–≤: {e}")
            return pd.DataFrame()

    def save_forecast(self, forecast_df, worksheet_name="–ü—Ä–æ–≥–Ω–æ–∑"):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ Google Sheets

        Args:
            forecast_df: DataFrame —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º
            worksheet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
            try:
                worksheet = self.sheet.worksheet(worksheet_name)
                worksheet.clear()  # –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            except gspread.WorksheetNotFound:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–∏—Å—Ç
                worksheet = self.sheet.add_worksheet(
                    title=worksheet_name, 
                    rows=len(forecast_df)+10, 
                    cols=len(forecast_df.columns)+2
                )

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º DataFrame –≤ —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
            data_to_upload = [forecast_df.columns.tolist()] + forecast_df.values.tolist()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            worksheet.update('A1', data_to_upload)

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            worksheet.format('A1:Z1', {
                'backgroundColor': {'red': 0.8, 'green': 0.8, 'blue': 0.8},
                'textFormat': {'bold': True}
            })

            logger.info(f"üíæ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ª–∏—Å—Ç '{worksheet_name}'")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")

    def load_user_corrections(self, worksheet_name="–ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏"):
        """
        –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞

        Args:
            worksheet_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞ —Å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞–º–∏

        Returns:
            pandas.DataFrame: –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        try:
            worksheet = self.sheet.worksheet(worksheet_name)
            data = worksheet.get_all_records()
            df = pd.DataFrame(data)

            if len(df) > 0:
                logger.info(f"‚úèÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫")

            return df

        except gspread.WorksheetNotFound:
            logger.info("üìù –õ–∏—Å—Ç –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π")
            return pd.DataFrame()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫: {e}")
            return pd.DataFrame()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    CREDENTIALS_PATH = "service_account_key.json"
    SPREADSHEET_URL = "https://docs.google.com/spreadsheets/d/your_spreadsheet_id/edit"

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    integrator = FlowerForecastGSheetsIntegration(CREDENTIALS_PATH, SPREADSHEET_URL)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    sales_data = integrator.load_sales_data()
    inventory_data = integrator.load_inventory_data()

    # –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞
    forecast_example = pd.DataFrame({
        '–î–∞—Ç–∞': ['2025-06-07', '2025-06-08', '2025-06-09'],
        '–ú–∞–≥–∞–∑–∏–Ω': ['–ê–ª–º–∞—Ç—ã_1', '–ê–ª–º–∞—Ç—ã_1', '–ê–ª–º–∞—Ç—ã_1'],
        'SKU': ['–†–æ–∑–∞_–∫—Ä–∞—Å–Ω–∞—è_60—Å–º', '–¢—é–ª—å–ø–∞–Ω_–±–µ–ª—ã–π', '–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞_–∂–µ–ª—Ç–∞—è'],
        '–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞': [45, 23, 18],
        '–¢–µ–∫—É—â–∏–π_–æ—Å—Ç–∞—Ç–æ–∫': [12, 35, 8],
        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏': [40, 0, 15],
        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': ['–í—ã—Å–æ–∫–∏–π', '–ù–∏–∑–∫–∏–π', '–°—Ä–µ–¥–Ω–∏–π']
    })

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    integrator.save_forecast(forecast_example)
    print("–°–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets —Å–æ–∑–¥–∞–Ω")

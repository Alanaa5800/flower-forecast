#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏
"""

import json
import os
from datetime import datetime, timedelta
import random
import math

class FlowerForecastModelTrainer:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤
    """
    
    def __init__(self):
        self.models = {}
        self.training_history = []
        self.metrics = {}
        
    def prepare_training_data(self, sales_data, weather_data=None, holidays_data=None):
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        
        Args:
            sales_data: –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥–∞–∂
            weather_data: –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            holidays_data: –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        
        Returns:
            dict: –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        """
        print("üìä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        training_data = self._generate_synthetic_training_data()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        if weather_data:
            training_data = self._add_weather_features(training_data, weather_data)
            
        if holidays_data:
            training_data = self._add_holiday_features(training_data, holidays_data)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(training_data)} –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        return training_data
    
    def _generate_synthetic_training_data(self, days=90):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        
        stores = ['almaty_1', 'almaty_2', 'almaty_3']
        skus = [
            '–†–æ–∑–∞_–∫—Ä–∞—Å–Ω–∞—è_60—Å–º', '–†–æ–∑–∞_–±–µ–ª–∞—è_50—Å–º', '–¢—é–ª—å–ø–∞–Ω_–∫—Ä–∞—Å–Ω—ã–π',
            '–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞_–∂–µ–ª—Ç–∞—è', '–õ–∏–ª–∏—è_–±–µ–ª–∞—è', '–ì–≤–æ–∑–¥–∏–∫–∞_–∫—Ä–∞—Å–Ω–∞—è'
        ]
        
        data = []
        base_date = datetime.now() - timedelta(days=days)
        
        for day in range(days):
            date = base_date + timedelta(days=day)
            
            # –°–µ–∑–æ–Ω–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            season_factor = 1 + 0.3 * math.sin(2 * math.pi * day / 365)
            
            # –§–∞–∫—Ç–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
            weekday_factor = 1.4 if date.weekday() in [5, 6] else 1.0
            
            # –ü—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
            holiday_factor = 1.0
            if date.strftime('%m-%d') in ['03-08', '02-14', '03-21']:
                holiday_factor = 3.5
            
            for store in stores:
                for sku in skus:
                    # –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å —Å —Ç—Ä–µ–Ω–¥–æ–º
                    base_demand = 20 + random.randint(-5, 15)
                    trend = day * 0.01  # –Ω–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
                    
                    # –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç–æ—Ä
                    noise = random.uniform(0.8, 1.2)
                    
                    # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø—Ä–æ—Å
                    actual_demand = int(
                        base_demand * season_factor * weekday_factor * 
                        holiday_factor * noise + trend
                    )
                    
                    # –í–Ω–µ—à–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
                    temperature = random.uniform(-10, 30)
                    precipitation = random.choice([0, 0, 0, 2, 5])
                    
                    data.append({
                        'date': date.isoformat(),
                        'store': store,
                        'sku': sku,
                        'actual_demand': max(0, actual_demand),
                        'day_of_week': date.weekday(),
                        'month': date.month,
                        'season_factor': season_factor,
                        'weekday_factor': weekday_factor,
                        'holiday_factor': holiday_factor,
                        'temperature': temperature,
                        'precipitation': precipitation,
                        'trend': trend
                    })
        
        return data
    
    def train_model(self, training_data, algorithm='linear_regression'):
        """
        –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        
        Args:
            training_data: –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            algorithm: –∞–ª–≥–æ—Ä–∏—Ç–º –æ–±—É—á–µ–Ω–∏—è
        
        Returns:
            dict: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è
        """
        print(f"ü§ñ –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º: {algorithm}")
        
        # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –æ–±—É—á–∞—é—â—É—é –∏ —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫–∏
        train_size = int(0.8 * len(training_data))
        train_data = training_data[:train_size]
        test_data = training_data[train_size:]
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è)
        model_params = self._train_algorithm(train_data, algorithm)
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
        metrics = self._evaluate_model(model_params, test_data, algorithm)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å
        model_info = {
            'algorithm': algorithm,
            'params': model_params,
            'metrics': metrics,
            'training_date': datetime.now().isoformat(),
            'training_samples': len(train_data),
            'test_samples': len(test_data)
        }
        
        self.models[algorithm] = model_info
        self.training_history.append(model_info)
        
        print(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å: {metrics['accuracy']:.2%}")
        return model_info
    
    def _train_algorithm(self, train_data, algorithm):
        """–û–±—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
        
        if algorithm == 'linear_regression':
            return self._train_linear_regression(train_data)
        elif algorithm == 'decision_tree':
            return self._train_decision_tree(train_data)
        elif algorithm == 'random_forest':
            return self._train_random_forest(train_data)
        elif algorithm == 'neural_network':
            return self._train_neural_network(train_data)
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º: {algorithm}")
    
    def _train_linear_regression(self, train_data):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏"""
        print("  üìà –û–±—É—á–µ–Ω–∏–µ –ª–∏–Ω–µ–π–Ω–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏...")
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        coefficients = {
            'intercept': random.uniform(10, 20),
            'season_factor': random.uniform(15, 25),
            'weekday_factor': random.uniform(8, 12),
            'holiday_factor': random.uniform(5, 10),
            'temperature': random.uniform(-0.5, 0.5),
            'precipitation': random.uniform(-2, -0.5),
            'trend': random.uniform(0.5, 1.5)
        }
        
        return coefficients
    
    def _train_decision_tree(self, train_data):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π"""
        print("  üå≥ –û–±—É—á–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ä–µ—à–µ–Ω–∏–π...")
        
        return {
            'max_depth': random.randint(5, 15),
            'min_samples_split': random.randint(2, 10),
            'feature_importance': {
                'season_factor': random.uniform(0.2, 0.4),
                'holiday_factor': random.uniform(0.15, 0.35),
                'weekday_factor': random.uniform(0.1, 0.25),
                'temperature': random.uniform(0.05, 0.15),
                'precipitation': random.uniform(0.05, 0.15)
            }
        }
    
    def _train_random_forest(self, train_data):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞"""
        print("  üå≤ –û–±—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ª–µ—Å–∞...")
        
        return {
            'n_estimators': random.randint(50, 200),
            'max_depth': random.randint(5, 20),
            'feature_importance': {
                'season_factor': random.uniform(0.25, 0.35),
                'holiday_factor': random.uniform(0.2, 0.3),
                'weekday_factor': random.uniform(0.15, 0.25),
                'temperature': random.uniform(0.05, 0.15),
                'precipitation': random.uniform(0.05, 0.15)
            },
            'oob_score': random.uniform(0.75, 0.9)
        }
    
    def _train_neural_network(self, train_data):
        """–°–∏–º—É–ª—è—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏"""
        print("  üß† –û–±—É—á–µ–Ω–∏–µ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...")
        
        return {
            'hidden_layers': [random.randint(32, 128), random.randint(16, 64)],
            'activation': 'relu',
            'learning_rate': random.uniform(0.001, 0.01),
            'epochs': random.randint(50, 200),
            'batch_size': random.choice([16, 32, 64]),
            'final_loss': random.uniform(0.1, 0.5)
        }
    
    def _evaluate_model(self, model_params, test_data, algorithm):
        """–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏"""
        print("  üìè –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏...")
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –≤—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        predictions = []
        actuals = []
        
        for record in test_data[:100]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            predicted = self._predict_single(record, model_params, algorithm)
            actual = record['actual_demand']
            
            predictions.append(predicted)
            actuals.append(actual)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics = self._calculate_metrics(predictions, actuals)
        return metrics
    
    def _predict_single(self, record, model_params, algorithm):
        """–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
        if algorithm == 'linear_regression':
            prediction = (
                model_params['intercept'] +
                model_params['season_factor'] * record['season_factor'] +
                model_params['weekday_factor'] * record['weekday_factor'] +
                model_params['holiday_factor'] * record['holiday_factor'] +
                model_params['temperature'] * record['temperature'] +
                model_params['precipitation'] * record['precipitation'] +
                model_params['trend'] * record['trend']
            )
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            base = record['actual_demand']
            noise = random.uniform(0.8, 1.2)
            prediction = base * noise
        
        return max(0, prediction)
    
    def _calculate_metrics(self, predictions, actuals):
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"""
        n = len(predictions)
        
        # MAE (Mean Absolute Error)
        mae = sum(abs(p - a) for p, a in zip(predictions, actuals)) / n
        
        # MAPE (Mean Absolute Percentage Error)
        mape = sum(abs((p - a) / max(a, 1)) for p, a in zip(predictions, actuals)) / n
        
        # RMSE (Root Mean Square Error)
        rmse = (sum((p - a) ** 2 for p, a in zip(predictions, actuals)) / n) ** 0.5
        
        # Accuracy (–æ–±—Ä–∞—Ç–Ω–∞—è MAPE)
        accuracy = max(0, 1 - mape)
        
        return {
            'mae': mae,
            'mape': mape,
            'rmse': rmse,
            'accuracy': accuracy,
            'sample_size': n
        }
    
    def compare_models(self):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        if not self.models:
            print("‚ùå –ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è")
            return None
        
        print("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π:")
        print("-" * 60)
        print(f"{'–ê–ª–≥–æ—Ä–∏—Ç–º':20} {'–¢–æ—á–Ω–æ—Å—Ç—å':>10} {'MAE':>8} {'RMSE':>8}")
        print("-" * 60)
        
        best_model = None
        best_accuracy = 0
        
        for algorithm, model in self.models.items():
            metrics = model['metrics']
            accuracy = metrics['accuracy']
            mae = metrics['mae']
            rmse = metrics['rmse']
            
            print(f"{algorithm:20} {accuracy:>9.2%} {mae:>7.1f} {rmse:>7.1f}")
            
            if accuracy > best_accuracy:
                best_accuracy = accuracy
                best_model = algorithm
        
        print("-" * 60)
        print(f"üèÜ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model} (—Ç–æ—á–Ω–æ—Å—Ç—å: {best_accuracy:.2%})")
        
        return best_model
    
    def retrain_model(self, algorithm=None):
        """–ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        if algorithm is None:
            algorithm = self.compare_models()
            if algorithm is None:
                algorithm = 'linear_regression'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        print(f"üîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {algorithm}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å –±—ã –∏–∑ –ë–î)
        new_training_data = self.prepare_training_data(None)
        
        # –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
        result = self.train_model(new_training_data, algorithm)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.save_model_config()
        
        return result
    
    def save_model_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
        config = {
            'models': self.models,
            'training_history': self.training_history,
            'last_update': datetime.now().isoformat()
        }
        
        with open('model_config.json', 'w', encoding='utf-8') as f:
            json.dump(config, f, ensure_ascii=False, indent=2)
        
        print("üíæ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    
    def load_model_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π"""
        try:
            with open('model_config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
            
            self.models = config.get('models', {})
            self.training_history = config.get('training_history', [])
            
            print("üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            return True
            
        except FileNotFoundError:
            print("üìù –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
            return False
    
    def get_model_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–∏—Ö –º–æ–¥–µ–ª—è—Ö"""
        if not self.models:
            return "–ù–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"
        
        info = []
        for algorithm, model in self.models.items():
            metrics = model['metrics']
            info.append({
                'algorithm': algorithm,
                'accuracy': metrics['accuracy'],
                'mae': metrics['mae'],
                'training_date': model['training_date'],
                'samples': model['training_samples']
            })
        
        return info

# –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
def demo_model_training():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""
    print("ü§ñ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    trainer = FlowerForecastModelTrainer()
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    training_data = trainer.prepare_training_data(None)
    
    # –û–±—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    algorithms = ['linear_regression', 'decision_tree', 'random_forest']
    
    for algorithm in algorithms:
        print(f"\nüìö –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {algorithm}")
        trainer.train_model(training_data, algorithm)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π
    print("\n" + "=" * 50)
    best_model = trainer.compare_models()
    
    # –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
    print(f"\nüîÑ –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: {best_model}")
    trainer.retrain_model(best_model)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    trainer.save_model_config()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return trainer

if __name__ == "__main__":
    demo_model_training()
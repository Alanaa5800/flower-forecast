#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import json
from datetime import datetime, timedelta
import random

def create_demo_forecast():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–ø—Ä–æ–≥–Ω–æ–∑–∞"""
    
    print("üå∏ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–≤–µ—Ç–æ–≤")
    print("=" * 55)
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–æ–≤
    stores = {
        "almaty_1": {
            "name": "–ê–ª–º–∞—Ç—ã –¶–£–ú",
            "type": "premium",
            "multiplier": 1.3
        },
        "almaty_2": {
            "name": "–ê–ª–º–∞—Ç—ã –ú–µ–≥–∞",
            "type": "mass_market", 
            "multiplier": 1.0
        },
        "almaty_3": {
            "name": "–ê–ª–º–∞—Ç—ã Dostyk Plaza",
            "type": "business",
            "multiplier": 1.1
        }
    }
    
    # –ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç —Ç–æ–≤–∞—Ä–æ–≤
    sku_data = {
        "premium": [
            "–†–æ–∑–∞_Premium_80—Å–º", "–ü–∏–æ–Ω_–∏–º–ø–æ—Ä—Ç", "–û—Ä—Ö–∏–¥–µ—è_—Ñ–∞–ª–µ–Ω–æ–ø—Å–∏—Å",
            "–õ–∏–ª–∏—è_–æ—Ä–∏–µ–Ω—Ç–∞–ª—å", "–†–æ–∑–∞_–î—ç–≤–∏–¥_–û—Å—Ç–∏–Ω"
        ],
        "mass_market": [
            "–†–æ–∑–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç_60—Å–º", "–¢—é–ª—å–ø–∞–Ω_—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞_–∫—É—Å—Ç",
            "–ì–≤–æ–∑–¥–∏–∫–∞_—Å—Ç–∞–Ω–¥–∞—Ä—Ç", "–ê–ª—å—Å—Ç—Ä–æ–º–µ—Ä–∏—è"
        ],
        "business": [
            "–†–æ–∑–∞_–±–∏–∑–Ω–µ—Å_70—Å–º", "–ë—É–∫–µ—Ç_–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π", "–ö–æ–º–ø–æ–∑–∏—Ü–∏—è_–æ—Ñ–∏—Å",
            "–†–æ–∑–∞_–∫–ª–∞—Å—Å–∏–∫", "–õ–∏–ª–∏—è_–±–∏–∑–Ω–µ—Å"
        ]
    }
    
    forecast_data = []
    total_demand = 0
    total_purchase = 0
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 7 –¥–Ω–µ–π
    for day in range(7):
        date = datetime.now() + timedelta(days=day)
        date_str = date.strftime('%Y-%m-%d')
        day_name = date.strftime('%A')
        
        print(f"\nüìÖ {date_str} ({day_name})")
        print("-" * 40)
        
        for store_id, store_info in stores.items():
            store_type = store_info["type"]
            store_name = store_info["name"]
            multiplier = store_info["multiplier"]
            
            print(f"\nüè™ {store_name}")
            
            skus = sku_data[store_type]
            
            for sku in skus:
                # –ë–∞–∑–æ–≤—ã–π —Å–ø—Ä–æ—Å
                base_demand = random.randint(8, 35)
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                if date.weekday() in [5, 6]:  # –≤—ã—Ö–æ–¥–Ω—ã–µ
                    weekend_mult = 1.4
                else:
                    weekend_mult = 1.0
                
                # –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø—Ä–æ—Å
                final_demand = int(base_demand * multiplier * weekend_mult)
                
                # –û—Å—Ç–∞—Ç–∫–∏
                current_stock = random.randint(0, 20)
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∑–∞–∫—É–ø–∫–∏
                safety_stock = 1.2
                recommended_purchase = max(0, int(final_demand * safety_stock - current_stock))
                
                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
                if recommended_purchase > final_demand:
                    priority = "–í–´–°–û–ö–ò–ô"
                elif recommended_purchase > final_demand * 0.5:
                    priority = "–°—Ä–µ–¥–Ω–∏–π"
                else:
                    priority = "–ù–∏–∑–∫–∏–π"
                
                # –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                print(f"  {sku:20} | –°–ø—Ä–æ—Å: {final_demand:2} | –û—Å—Ç–∞—Ç–æ–∫: {current_stock:2} | –ó–∞–∫—É–ø–∫–∞: {recommended_purchase:2} | {priority}")
                
                total_demand += final_demand
                total_purchase += recommended_purchase
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—Å—Å–∏–≤
                forecast_data.append({
                    "date": date_str,
                    "day": day_name,
                    "store_id": store_id,
                    "store_name": store_name,
                    "sku": sku,
                    "demand": final_demand,
                    "stock": current_stock,
                    "purchase": recommended_purchase,
                    "priority": priority
                })
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\n" + "=" * 55)
    print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
    print("=" * 55)
    print(f"–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞:        {total_demand:,} –µ–¥–∏–Ω–∏—Ü")
    print(f"–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∑–∞–∫—É–ø–∫–∏:  {total_purchase:,} –µ–¥–∏–Ω–∏—Ü")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∑–∏—Ü–∏–π:          {len(forecast_data)}")
    print(f"–ü–µ—Ä–∏–æ–¥ –ø—Ä–æ–≥–Ω–æ–∑–∞:             7 –¥–Ω–µ–π")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞–≥–∞–∑–∏–Ω–æ–≤:        {len(stores)}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
    print("\nüìà –ê–ù–ê–õ–ò–ó –ü–û –ú–ê–ì–ê–ó–ò–ù–ê–ú")
    print("-" * 55)
    
    for store_id, store_info in stores.items():
        store_data = [item for item in forecast_data if item["store_id"] == store_id]
        store_demand = sum(item["demand"] for item in store_data)
        store_purchase = sum(item["purchase"] for item in store_data)
        
        print(f"{store_info['name']:20} | –°–ø—Ä–æ—Å: {store_demand:3} | –ó–∞–∫—É–ø–∫–∞: {store_purchase:3}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–Ω—è–º
    print("\nüìÖ –ê–ù–ê–õ–ò–ó –ü–û –î–ù–Ø–ú")
    print("-" * 55)
    
    daily_stats = {}
    for item in forecast_data:
        date = item["date"]
        if date not in daily_stats:
            daily_stats[date] = {"demand": 0, "purchase": 0}
        daily_stats[date]["demand"] += item["demand"]
        daily_stats[date]["purchase"] += item["purchase"]
    
    for date, stats in daily_stats.items():
        day_obj = datetime.strptime(date, '%Y-%m-%d')
        day_name = day_obj.strftime('%A')
        print(f"{date} ({day_name:9}) | –°–ø—Ä–æ—Å: {stats['demand']:3} | –ó–∞–∫—É–ø–∫–∞: {stats['purchase']:3}")
    
    # –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤
    print("\nüèÜ –¢–û–ü-5 –¢–û–í–ê–†–û–í –ü–û –°–ü–†–û–°–£")
    print("-" * 55)
    
    sku_stats = {}
    for item in forecast_data:
        sku = item["sku"]
        if sku not in sku_stats:
            sku_stats[sku] = 0
        sku_stats[sku] += item["demand"]
    
    top_skus = sorted(sku_stats.items(), key=lambda x: x[1], reverse=True)[:5]
    
    for i, (sku, demand) in enumerate(top_skus, 1):
        print(f"{i}. {sku:25} | –û–±—â–∏–π —Å–ø—Ä–æ—Å: {demand:3}")
    
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    high_priority = [item for item in forecast_data if item["priority"] == "–í–´–°–û–ö–ò–ô"]
    print(f"\nüö® –í–´–°–û–ö–ò–ô –ü–†–ò–û–†–ò–¢–ï–¢: {len(high_priority)} –ø–æ–∑–∏—Ü–∏–π")
    print("-" * 55)
    
    for item in high_priority[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        print(f"{item['date']} | {item['store_name']:15} | {item['sku']:20} | –ó–∞–∫—É–ø–∫–∞: {item['purchase']:2}")
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ JSON
    output_file = "demo_forecast.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(forecast_data, f, ensure_ascii=False, indent=2)
    
    print(f"\nüíæ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {output_file}")
    
    print("\n‚úÖ –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û!")
    print("üéØ –ì–æ—Ç–æ–≤–∞ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets")
    print("üåê –ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –≤ Colab")
    
    return forecast_data

if __name__ == "__main__":
    create_demo_forecast()
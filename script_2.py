# –°–æ–∑–¥–∞–µ–º Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
streamlit_app = '''
import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import requests
import json
from google_sheets_integration import FlowerForecastGSheetsIntegration

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="üå∏ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Ü–≤–µ—Ç–æ–≤",
    page_icon="üå∏",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –°—Ç–∏–ª–∏ CSS
st.markdown("""
<style>
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
        padding: 0.75rem;
        border-radius: 0.25rem;
    }
    .warning-box {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        color: #856404;
        padding: 0.75rem;
        border-radius: 0.25rem;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
        padding: 0.75rem;
        border-radius: 0.25rem;
    }
</style>
""", unsafe_allow_html=True)

class FlowerForecastApp:
    def __init__(self):
        self.weather_api_key = st.secrets.get("WEATHER_API_KEY", "demo_key")
        self.init_session_state()
    
    def init_session_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        if 'forecast_data' not in st.session_state:
            st.session_state.forecast_data = pd.DataFrame()
        if 'corrections' not in st.session_state:
            st.session_state.corrections = {}
        if 'weather_data' not in st.session_state:
            st.session_state.weather_data = {}
    
    def get_weather_data(self, city="Almaty"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç API call
            weather_data = {
                'temperature': np.random.normal(15, 10),
                'humidity': np.random.randint(40, 80),
                'precipitation': np.random.choice([0, 0, 0, 2, 5, 10], p=[0.6, 0.1, 0.1, 0.1, 0.05, 0.05]),
                'wind_speed': np.random.normal(3, 2),
                'forecast': [
                    {'date': datetime.now() + timedelta(days=i), 
                     'temp': np.random.normal(15, 5), 
                     'rain': np.random.choice([0, 1, 2, 5], p=[0.7, 0.15, 0.1, 0.05])}
                    for i in range(7)
                ]
            }
            return weather_data
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}")
            return {}
    
    def load_holidays(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞—Ö"""
        try:
            holidays_df = pd.read_csv('kazakhstan_holidays_2025.csv')
            holidays_df['date_2025'] = pd.to_datetime(holidays_df['date_2025'])
            return holidays_df
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤: {e}")
            return pd.DataFrame()
    
    def generate_sample_forecast(self, days=7, stores=['–ê–ª–º–∞—Ç—ã_1', '–ê–ª–º–∞—Ç—ã_2', '–ê–ª–º–∞—Ç—ã_3']):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞"""
        np.random.seed(42)
        
        skus = [
            '–†–æ–∑–∞_–∫—Ä–∞—Å–Ω–∞—è_60—Å–º', '–†–æ–∑–∞_–±–µ–ª–∞—è_50—Å–º', '–¢—é–ª—å–ø–∞–Ω_–∫—Ä–∞—Å–Ω—ã–π', 
            '–¢—é–ª—å–ø–∞–Ω_–±–µ–ª—ã–π', '–•—Ä–∏–∑–∞–Ω—Ç–µ–º–∞_–∂–µ–ª—Ç–∞—è', '–õ–∏–ª–∏—è_–±–µ–ª–∞—è',
            '–ì–≤–æ–∑–¥–∏–∫–∞_–∫—Ä–∞—Å–Ω–∞—è', '–ú–∏–º–æ–∑–∞', '–ù–∞—Ä—Ü–∏—Å—Å_–±–µ–ª—ã–π'
        ]
        
        data = []
        for day in range(days):
            date = datetime.now() + timedelta(days=day)
            for store in stores:
                for sku in skus:
                    base_demand = np.random.randint(5, 50)
                    
                    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–ø—Ä–æ—Å–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                    if date.weekday() in [5, 6]:  # –≤—ã—Ö–æ–¥–Ω—ã–µ
                        base_demand *= 1.5
                    
                    # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç SKU
                    if '—Ä–æ–∑–∞' in sku.lower():
                        base_demand *= 1.3
                    
                    current_stock = np.random.randint(0, 30)
                    recommended_purchase = max(0, int(base_demand * 1.2 - current_stock))
                    
                    priority = '–ù–∏–∑–∫–∏–π'
                    if recommended_purchase > base_demand:
                        priority = '–í—ã—Å–æ–∫–∏–π'
                    elif recommended_purchase > base_demand * 0.5:
                        priority = '–°—Ä–µ–¥–Ω–∏–π'
                    
                    data.append({
                        '–î–∞—Ç–∞': date.strftime('%Y-%m-%d'),
                        '–î–µ–Ω—å_–Ω–µ–¥–µ–ª–∏': date.strftime('%A'),
                        '–ú–∞–≥–∞–∑–∏–Ω': store,
                        'SKU': sku,
                        '–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞': int(base_demand),
                        '–¢–µ–∫—É—â–∏–π_–æ—Å—Ç–∞—Ç–æ–∫': current_stock,
                        '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏': recommended_purchase,
                        '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç': priority
                    })
        
        return pd.DataFrame(data)
    
    def main(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        st.title("üå∏ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–∞–∂ —Ü–≤–µ—Ç–æ–≤")
        st.markdown("**–ê–ª–º–∞—Ç—ã | –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Ü–≤–µ—Ç–æ—á–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞**")
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        with st.sidebar:
            st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
            
            # –í—ã–±–æ—Ä –º–∞–≥–∞–∑–∏–Ω–æ–≤
            available_stores = ['–ê–ª–º–∞—Ç—ã_1', '–ê–ª–º–∞—Ç—ã_2', '–ê–ª–º–∞—Ç—ã_3', '–ê–ª–º–∞—Ç—ã_4', '–ê–ª–º–∞—Ç—ã_5']
            selected_stores = st.multiselect(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω—ã:",
                available_stores,
                default=['–ê–ª–º–∞—Ç—ã_1', '–ê–ª–º–∞—Ç—ã_2']
            )
            
            # –ì–æ—Ä–∏–∑–æ–Ω—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
            forecast_days = st.slider("–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", 1, 30, 7)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑"):
                with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞..."):
                    st.session_state.forecast_data = self.generate_sample_forecast(
                        days=forecast_days,
                        stores=selected_stores
                    )
                st.success("–ü—Ä–æ–≥–Ω–æ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        tab1, tab2, tab3, tab4, tab5 = st.tabs([
            "üìä –ü—Ä–æ–≥–Ω–æ–∑", "‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏", "üå§Ô∏è –ü–æ–≥–æ–¥–∞", "üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"
        ])
        
        with tab1:
            self.show_forecast_tab(selected_stores, forecast_days)
        
        with tab2:
            self.show_corrections_tab()
        
        with tab3:
            self.show_weather_tab()
        
        with tab4:
            self.show_analytics_tab()
        
        with tab5:
            self.show_settings_tab()
    
    def show_forecast_tab(self, selected_stores, forecast_days):
        """–í–∫–ª–∞–¥–∫–∞ —Å –ø—Ä–æ–≥–Ω–æ–∑–æ–º"""
        st.header("üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if st.session_state.forecast_data.empty:
            st.session_state.forecast_data = self.generate_sample_forecast(
                days=forecast_days,
                stores=selected_stores
            )
        
        df = st.session_state.forecast_data
        
        if not df.empty:
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                total_demand = df['–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞'].sum()
                st.metric("–û–±—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞", f"{total_demand:,}")
            
            with col2:
                total_purchase = df['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏'].sum()
                st.metric("–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∑–∞–∫—É–ø–∫–∞", f"{total_purchase:,}")
            
            with col3:
                high_priority = len(df[df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'] == '–í—ã—Å–æ–∫–∏–π'])
                st.metric("–ü–æ–∑–∏—Ü–∏–π –≤—ã—Å–æ–∫–æ–≥–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞", high_priority)
            
            with col4:
                avg_stock = df['–¢–µ–∫—É—â–∏–π_–æ—Å—Ç–∞—Ç–æ–∫'].mean()
                st.metric("–°—Ä–µ–¥–Ω–∏–π –æ—Å—Ç–∞—Ç–æ–∫", f"{avg_stock:.1f}")
            
            # –§–∏–ª—å—Ç—Ä—ã
            st.subheader("üîç –§–∏–ª—å—Ç—Ä—ã")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                date_filter = st.selectbox("–î–∞—Ç–∞:", ['–í—Å–µ'] + df['–î–∞—Ç–∞'].unique().tolist())
            
            with col2:
                store_filter = st.selectbox("–ú–∞–≥–∞–∑–∏–Ω:", ['–í—Å–µ'] + df['–ú–∞–≥–∞–∑–∏–Ω'].unique().tolist())
            
            with col3:
                priority_filter = st.selectbox("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", ['–í—Å–µ'] + df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'].unique().tolist())
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
            filtered_df = df.copy()
            if date_filter != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['–î–∞—Ç–∞'] == date_filter]
            if store_filter != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['–ú–∞–≥–∞–∑–∏–Ω'] == store_filter]
            if priority_filter != '–í—Å–µ':
                filtered_df = filtered_df[filtered_df['–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç'] == priority_filter]
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞
            st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
            st.dataframe(
                filtered_df,
                use_container_width=True,
                hide_index=True
            )
            
            # –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ –¥–Ω—è–º
            st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ —Å–ø—Ä–æ—Å–∞")
            daily_forecast = df.groupby('–î–∞—Ç–∞')['–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞'].sum().reset_index()
            
            fig = px.line(
                daily_forecast,
                x='–î–∞—Ç–∞',
                y='–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞',
                title="–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞ –ø–æ –¥–Ω—è–º",
                markers=True
            )
            fig.update_layout(height=400)
            st.plotly_chart(fig, use_container_width=True)
            
            # –≠–∫—Å–ø–æ—Ä—Ç
            if st.button("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
                st.download_button(
                    label="–°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑",
                    data=filtered_df.to_csv(index=False),
                    file_name=f"forecast_{datetime.now().strftime('%Y%m%d')}.csv",
                    mime="text/csv"
                )
    
    def show_corrections_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫"""
        st.header("‚úèÔ∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞")
        
        st.markdown("""
        <div class="warning-box">
        ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –≤–ª–∏—è—é—Ç –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏. 
        –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∏–∑–º–µ–Ω–µ–Ω–∏—è.
        </div>
        """, unsafe_allow_html=True)
        
        if not st.session_state.forecast_data.empty:
            df = st.session_state.forecast_data
            
            # –í—ã–±–æ—Ä –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
            st.subheader("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:")
            
            col1, col2, col3 = st.columns(3)
            with col1:
                selected_date = st.selectbox("–î–∞—Ç–∞:", df['–î–∞—Ç–∞'].unique())
            with col2:
                selected_store = st.selectbox("–ú–∞–≥–∞–∑–∏–Ω:", df['–ú–∞–≥–∞–∑–∏–Ω'].unique())
            with col3:
                filtered_skus = df[(df['–î–∞—Ç–∞'] == selected_date) & 
                                 (df['–ú–∞–≥–∞–∑–∏–Ω'] == selected_store)]['SKU'].unique()
                selected_sku = st.selectbox("SKU:", filtered_skus)
            
            # –¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            current_row = df[(df['–î–∞—Ç–∞'] == selected_date) & 
                           (df['–ú–∞–≥–∞–∑–∏–Ω'] == selected_store) & 
                           (df['SKU'] == selected_sku)]
            
            if not current_row.empty:
                current_forecast = current_row['–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞'].iloc[0]
                current_purchase = current_row['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏'].iloc[0]
                
                st.subheader("–¢–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                col1, col2 = st.columns(2)
                with col1:
                    st.info(f"–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞: {current_forecast}")
                with col2:
                    st.info(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∑–∞–∫—É–ø–∫–∏: {current_purchase}")
                
                # –§–æ—Ä–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                st.subheader("–ù–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:")
                with st.form("correction_form"):
                    col1, col2 = st.columns(2)
                    
                    with col1:
                        new_forecast = st.number_input(
                            "–ù–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞:",
                            min_value=0,
                            value=current_forecast
                        )
                    
                    with col2:
                        new_purchase = st.number_input(
                            "–ù–æ–≤–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∑–∞–∫—É–ø–∫–∏:",
                            min_value=0,
                            value=current_purchase
                        )
                    
                    reason = st.text_area(
                        "–ü—Ä–∏—á–∏–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏:",
                        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∞–∫—Ü–∏—è, –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–æ—Å—Ç–∞–≤–∫–∞..."
                    )
                    
                    submitted = st.form_submit_button("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫—É")
                    
                    if submitted and reason:
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
                        correction_key = f"{selected_date}_{selected_store}_{selected_sku}"
                        st.session_state.corrections[correction_key] = {
                            'original_forecast': current_forecast,
                            'new_forecast': new_forecast,
                            'original_purchase': current_purchase,
                            'new_purchase': new_purchase,
                            'reason': reason,
                            'timestamp': datetime.now().isoformat()
                        }
                        
                        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞
                        mask = ((df['–î–∞—Ç–∞'] == selected_date) & 
                               (df['–ú–∞–≥–∞–∑–∏–Ω'] == selected_store) & 
                               (df['SKU'] == selected_sku))
                        st.session_state.forecast_data.loc[mask, '–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞'] = new_forecast
                        st.session_state.forecast_data.loc[mask, '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏'] = new_purchase
                        
                        st.success("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
                        st.rerun()
        
        # –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫
        if st.session_state.corrections:
            st.subheader("üìã –ò—Å—Ç–æ—Ä–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–æ–∫")
            corrections_list = []
            for key, correction in st.session_state.corrections.items():
                date, store, sku = key.split('_', 2)
                corrections_list.append({
                    '–î–∞—Ç–∞': date,
                    '–ú–∞–≥–∞–∑–∏–Ω': store,
                    'SKU': sku,
                    '–ë—ã–ª–æ': correction['original_forecast'],
                    '–°—Ç–∞–ª–æ': correction['new_forecast'],
                    '–ü—Ä–∏—á–∏–Ω–∞': correction['reason']
                })
            
            corrections_df = pd.DataFrame(corrections_list)
            st.dataframe(corrections_df, use_container_width=True)
    
    def show_weather_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —Å –ø–æ–≥–æ–¥–æ–π"""
        st.header("üå§Ô∏è –ü–æ–≥–æ–¥–Ω—ã–µ —É—Å–ª–æ–≤–∏—è")
        
        weather_data = self.get_weather_data()
        
        if weather_data:
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", f"{weather_data['temperature']:.1f}¬∞C")
            with col2:
                st.metric("–í–ª–∞–∂–Ω–æ—Å—Ç—å", f"{weather_data['humidity']}%")
            with col3:
                st.metric("–û—Å–∞–¥–∫–∏", f"{weather_data['precipitation']} –º–º")
            with col4:
                st.metric("–í–µ—Ç–µ—Ä", f"{weather_data['wind_speed']:.1f} –º/—Å")
            
            # –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é
            st.subheader("üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ –Ω–µ–¥–µ–ª—é")
            
            if 'forecast' in weather_data:
                forecast_df = pd.DataFrame(weather_data['forecast'])
                forecast_df['date'] = pd.to_datetime(forecast_df['date'])
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=forecast_df['date'],
                    y=forecast_df['temp'],
                    mode='lines+markers',
                    name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞',
                    line=dict(color='red')
                ))
                
                fig.add_trace(go.Bar(
                    x=forecast_df['date'],
                    y=forecast_df['rain'],
                    name='–û—Å–∞–¥–∫–∏',
                    yaxis='y2',
                    opacity=0.7
                ))
                
                fig.update_layout(
                    title='–ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –∏ –æ—Å–∞–¥–∫–æ–≤',
                    xaxis_title='–î–∞—Ç–∞',
                    yaxis_title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
                    yaxis2=dict(
                        title='–û—Å–∞–¥–∫–∏ (–º–º)',
                        overlaying='y',
                        side='right'
                    ),
                    height=400
                )
                
                st.plotly_chart(fig, use_container_width=True)
    
    def show_analytics_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        st.header("üìà –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏")
        
        if not st.session_state.forecast_data.empty:
            df = st.session_state.forecast_data
            
            # –ê–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º
            st.subheader("üè™ –ê–Ω–∞–ª–∏–∑ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º")
            store_analysis = df.groupby('–ú–∞–≥–∞–∑–∏–Ω').agg({
                '–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞': 'sum',
                '–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è_–∑–∞–∫—É–ø–∫–∏': 'sum',
                '–¢–µ–∫—É—â–∏–π_–æ—Å—Ç–∞—Ç–æ–∫': 'mean'
            }).round(1)
            
            fig = px.bar(
                store_analysis.reset_index(),
                x='–ú–∞–≥–∞–∑–∏–Ω',
                y='–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞',
                title='–ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞ –ø–æ –º–∞–≥–∞–∑–∏–Ω–∞–º'
            )
            st.plotly_chart(fig, use_container_width=True)
            
            # –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤
            st.subheader("üèÜ –¢–û–ü —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å–ø—Ä–æ—Å—É")
            top_skus = df.groupby('SKU')['–ü—Ä–æ–≥–Ω–æ–∑_—Å–ø—Ä–æ—Å–∞'].sum().nlargest(10)
            
            fig = px.bar(
                x=top_skus.values,
                y=top_skus.index,
                orientation='h',
                title='–¢–û–ü-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–º—É —Å–ø—Ä–æ—Å—É'
            )
            st.plotly_chart(fig, use_container_width=True)
    
    def show_settings_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        
        with st.expander("üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Google Sheets"):
            spreadsheet_url = st.text_input(
                "URL Google –¢–∞–±–ª–∏—Ü—ã:",
                placeholder="https://docs.google.com/spreadsheets/d/..."
            )
            
            if st.button("üîÑ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets"):
                if spreadsheet_url:
                    st.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...")
                    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                else:
                    st.error("–í–≤–µ–¥–∏—Ç–µ URL —Ç–∞–±–ª–∏—Ü—ã")
        
        with st.expander("üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏"):
            st.slider("–°–µ–∑–æ–Ω–Ω–æ—Å—Ç—å (–¥–Ω–∏):", 1, 30, 7)
            st.slider("–í–ª–∏—è–Ω–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (%):", 0, 500, 200)
            st.slider("–í–ª–∏—è–Ω–∏–µ –ø–æ–≥–æ–¥—ã (%):", 0, 100, 20)
        
        with st.expander("üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"):
            st.checkbox("Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
            st.checkbox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∏–∑–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö")
            st.checkbox("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–º —Å–ø—Ä–æ—Å–µ")

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    app = FlowerForecastApp()
    app.main()
'''

# –°–æ—Ö—Ä–∞–Ω—è–µ–º Streamlit –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
with open('streamlit_forecast_app.py', 'w', encoding='utf-8') as f:
    f.write(streamlit_app)

print("–§–∞–π–ª streamlit_forecast_app.py —Å–æ–∑–¥–∞–Ω")